#!/usr/bin/env rust-script
//! ```cargo
//! [dependencies]
//! cradle = "=0.0.12"
//! lazy_static = "=1.4.0"
//! serde_yaml = "=0.8.17"
//! which = "=4.1.0"
//! ```

use cradle::*;
use std::{fs, path::Path, thread, time::Duration};
use which::which;

const LND_VERSION: &str = "v0.13.0-beta";

lazy_static::lazy_static! {
    static ref CONFIG: serde_yaml::Value =
        serde_yaml::from_str::<serde_yaml::Value>(&fs::read_to_string("config.yaml").unwrap())
            .unwrap()
            .clone();
    static ref NETWORK: String = CONFIG["network"].as_str().unwrap().to_string();
}

fn is_in_path(binary: &str) -> bool {
    match which(binary) {
        Err(which::Error::CannotFindBinaryPath) => false,
        Err(error) => panic!("{}", error),
        Ok(_) => true,
    }
}

fn main() {
    install_yq();
    install_lnd();
    install_lntop();

    if !Path::new("/etc/lnd/wallet-password").exists() {
        eprintln!("Removing `wallet-unlock-password-file` setting from lnd.confâ€¦");

        let conf = fs::read_to_string("/etc/lnd/lnd.conf")
            .unwrap()
            .lines()
            .filter(|line| !line.contains("/etc/lnd/wallet-password"))
            .collect::<Vec<&str>>()
            .join("\n");

        fs::write("/etc/lnd/lnd.conf", conf).unwrap();
    }

    cmd_unit!(%"systemctl daemon-reload");
    cmd_unit!(%"systemctl enable lnd");
    cmd_unit!(%"systemctl restart lnd");
    setup_wallet();
}

fn install_yq() {
    if !is_in_path("yq") {
        cmd_unit!(%"pip3 install yq");
    }
    cmd_unit!(%"yq --version");
}

fn install_lnd() {
    if !is_in_path("lnd") {
        cmd_unit!(
            "wget",
            ("-O", format!("lnd-linux-amd64-{}.tar.gz", LND_VERSION)),
            format!(
                "https://github.com/lightningnetwork/lnd/releases/download/{}/lnd-linux-amd64-{}.tar.gz",
                LND_VERSION,
                LND_VERSION
            ),
        );
        cmd_unit!(
            "tar",
            "-xzvf",
            format!("lnd-linux-amd64-{}.tar.gz", LND_VERSION),
            ("-C", "/usr/local/bin/"),
            "--strip-components=1",
            format!("lnd-linux-amd64-{}/lnd", LND_VERSION),
            format!("lnd-linux-amd64-{}/lncli", LND_VERSION),
        );
    }

    let StdoutUntrimmed(version) = cmd!(%"lnd --version");
    eprintln!("{}", version);
    if !version.contains(LND_VERSION) {
        panic!(
            "LND version mismatch: expected: {} actual: {}",
            LND_VERSION, version
        );
    }
}

fn install_lntop() {
    if !is_in_path("lntop") {
        cmd_unit!(%"rm -rf lntop");
        cmd_unit!(%"git clone https://github.com/edouardparis/lntop.git");
        cmd_unit!(CurrentDir("lntop"), %"go install ./...");
        cmd_unit!(%"cp go/bin/lntop /usr/local/bin");
    }
    cmd_unit!(%"lntop --version");
}

fn setup_wallet() {
    loop {
        let json = loop {
            let (Status(status), StdoutUntrimmed(stdout), Stderr(stderr)) = cmd!(
                "lncli",
                ("--network", &*NETWORK),
                "--lnddir=/var/lib/lnd",
                "state"
            );
            if status.success() {
                break stdout;
            }
            assert!(stderr.contains("connection refused"));
            eprint!("{}", stderr);
            eprintln!("waiting for lnd to be functional...");
            thread::sleep(Duration::from_secs(1));
        };
        let json = serde_yaml::from_str::<serde_yaml::Value>(&json).unwrap();
        let state = json["state"].as_str().unwrap().clone();
        eprintln!("wallet state: {}", &state);
        match state {
            "NON_EXISTING" => {
                panic!("Please run `just create-wallet`!");
            }
            "LOCKED" => {
                eprintln!("waiting for wallet to be unlocked...");
                thread::sleep(Duration::from_secs(1));
            }
            "UNLOCKED" => {
                eprintln!("waiting for wallet to be active...");
                thread::sleep(Duration::from_secs(1));
            }
            "RPC_ACTIVE" => break,
            _ => panic!("Unknown LND state: {}", state),
        }
    }
}
