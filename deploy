#!/usr/bin/env rust-script
//! ```cargo
//! [dependencies]
//! cradle = "=0.0.12"
//! lazy_static = "=1.4.0"
//! serde_yaml = "=0.8.17"
//! ```
use cradle::*;
use std::{fs, path::Path};

lazy_static::lazy_static! {
  static ref HOSTNAME: String = std::env::var("HOSTNAME").expect("HOSTNAME env var not set");
  static ref CONFIG: serde_yaml::Value = {
    serde_yaml::from_str::<serde_yaml::Value>(&fs::read_to_string("config.yaml").unwrap()).unwrap()
        [&*HOSTNAME]
        .clone()
  };
  static ref IP: &'static str = CONFIG["ipv4"].as_str().unwrap();
  static ref CONTENT_REF: &'static str = CONFIG["content_ref"].as_str().unwrap();
  static ref DOMAIN: &'static str = CONFIG["domain"].as_str().unwrap();
}

fn scp(source: &str, destination: &str) {
    cmd_unit!(
        LogCommand,
        "scp",
        source,
        format!("root@{}:{}", *IP, destination)
    );
}

fn ssh<I: Input, O: Output>(input: I) -> O {
    cmd!(LogCommand, "ssh", format!("root@{}", *IP), input)
}

fn ssh_unit<I: Input>(input: I) {
    ssh(input)
}

fn copy_config() {
    let host_config: String = serde_yaml::to_string(&*CONFIG).unwrap();
    ssh_unit((Stdin(host_config), "cat > ~/config.yaml"));
}

fn copy_bitcoind_files() {
    scp("tmp/bitcoind.service", "/etc/systemd/system/");
    ssh_unit("mkdir -p /etc/bitcoin");
    ssh_unit("chmod 710 /etc/bitcoin");
    scp("tmp/bitcoin.conf", "/etc/bitcoin/");
    if &*HOSTNAME == "athens" {
        scp("mnt-athens.mount", "/etc/systemd/system/");
    }
}

fn copy_lnd_files() {
    scp("lnd.service", "/etc/systemd/system/");
    ssh_unit("mkdir -p /etc/lnd");
    ssh_unit("chmod 710 /etc/lnd");
    scp("tmp/lnd.conf", "/etc/lnd/");
    scp("setup-lightning", "~/");
    ssh_unit("chmod +x setup-lightning");

    ssh_unit("mkdir -p .lntop");
    scp("tmp/lntop.toml", "~/.lntop/config.toml");
}

fn copy_agora_files() {
    scp("tmp/agora.service", "/etc/systemd/system/");
}

fn copy_agora_content() {
    if !Path::new("tmp/content").exists() {
        cmd_unit!(%"git clone git@github.com:agora-org/content.git tmp/content");
    }

    cmd_unit!(CurrentDir("tmp/content"), %"git checkout", *CONTENT_REF);
    cmd_unit!(CurrentDir("tmp/content"), %"git pull --ff-only");
    cmd_unit!(
        "rsync",
        %"--recursive --links --times --progress --delete --delete-excluded --mkpath --exclude .git",
        "tmp/content/",
        format!("root@{}:/srv/agora/", *IP),
    );
}

fn install_just() {
    let Status(status) = ssh("just --version");
    if !status.success() {
        ssh_unit(
            "curl --proto =https --tlsv1.2 -sSf https://just.systems/install.sh \
            | bash -s -- --to /usr/local/bin",
        );
    }
}

fn add_cargo_bin_to_path() {
    let line = "export PATH=\"$HOME/.cargo/bin:$PATH\"\n";
    let StdoutUntrimmed(mut bashrc) = ssh("cat ~/.bashrc");
    if !bashrc.starts_with(line) {
        bashrc.insert_str(0, line);
        ssh_unit((Stdin(bashrc), "cat > ~/.bashrc"));
    }
}

fn main() {
    eprintln!("deploying to {}...", *HOSTNAME);
    cmd_unit!(%"just render-templates");
    copy_config();
    scp("50reboot-on-upgrades", "/etc/apt/apt.conf.d/");
    copy_bitcoind_files();
    cmd_unit!(%"rust-script --test setup-lightning");
    copy_lnd_files();
    copy_agora_files();
    copy_agora_content();
    install_just();
    add_cargo_bin_to_path();
    ssh_unit(("hostnamectl", "set-hostname", &*HOSTNAME));
    cmd_unit!(%"just run setup");
    eprintln!("successfully deployed to {}: http://{}", *HOSTNAME, *DOMAIN);
}
